{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "# In[ ]:\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import glob\n",
    "import matplotlib.pyplot as plt\n",
    "import clr\n",
    "import sys\n",
    "import os\n",
    "from System.IO import *\n",
    "from System import String\n",
    "from System.Threading import AutoResetEvent\n",
    "from System.Collections.Generic import List\n",
    "# from fit_code2 import ration\n",
    "# Add needed dll references\n",
    "sys.path.append(os.environ['LIGHTFIELD_ROOT'])\n",
    "sys.path.append(os.environ['LIGHTFIELD_ROOT']+\"\\\\AddInViews\")\n",
    "clr.AddReference('PrincetonInstruments.LightFieldViewV5')\n",
    "clr.AddReference('PrincetonInstruments.LightField.AutomationV5')\n",
    "clr.AddReference('PrincetonInstruments.LightFieldAddInSupportServices')\n",
    "\n",
    "# PI imports\n",
    "from PrincetonInstruments.LightField.Automation import Automation\n",
    "from PrincetonInstruments.LightField.AddIns import CameraSettings\n",
    "from PrincetonInstruments.LightField.AddIns import ExperimentSettings\n",
    "from PrincetonInstruments.LightField.AddIns import DeviceType\n",
    "from PrincetonInstruments.LightField.AddIns import SpectrometerSettings\n",
    "\n",
    "import time\n",
    "    \n",
    "\n",
    "\n",
    "def capture_photo(begin,exp_no):\n",
    "    global device_found\n",
    "    global experiment\n",
    "    global save_file\n",
    "    global file_manager\n",
    "    \n",
    "    if begin==\"start\":\n",
    "        def save_file(filename):    \n",
    "        # Set the base file name\n",
    "            experiment.SetValue(\n",
    "                ExperimentSettings.FileNameGenerationBaseFileName,\n",
    "                Path.GetFileName(filename))\n",
    "\n",
    "            # Option to Increment, set to false will not increment\n",
    "            experiment.SetValue(\n",
    "                ExperimentSettings.FileNameGenerationAttachIncrement,\n",
    "                True)\n",
    "\n",
    "            # Option to add date\n",
    "            experiment.SetValue(\n",
    "                ExperimentSettings.FileNameGenerationAttachDate,\n",
    "                True)\n",
    "\n",
    "            # Option to add time\n",
    "            experiment.SetValue(\n",
    "                ExperimentSettings.FileNameGenerationAttachTime,\n",
    "                True)\n",
    "       \n",
    "        def device_found():\n",
    "            # Find connected device\n",
    "            for device in experiment.ExperimentDevices:\n",
    "                if (device.Type == DeviceType.Camera):\n",
    "                    return True\n",
    "\n",
    "            # If connected device is not a camera inform the user\n",
    "            print(\"Camera not found. Please add a camera and try again.\")\n",
    "            return False  \n",
    "\n",
    "\n",
    "\n",
    "        # Create the LightField Application (true for visible)\n",
    "        # The 2nd parameter forces LF to load with no experiment \n",
    "        auto = Automation(True, List[String]())\n",
    "        application= auto.LightFieldApplication\n",
    "        experiment = auto.LightFieldApplication.Experiment\n",
    "        file_manager=application.FileManager\n",
    "        \n",
    "    if begin==\"bg\":\n",
    "        def set_value(setting, value):    \n",
    "        # Check for existence before setting\n",
    "        # gain, adc rate, or adc quality\n",
    "            if experiment.Exists(setting):\n",
    "                experiment.SetValue(setting, value)\n",
    "\n",
    "        def experiment_completed(sender, event_args):    \n",
    "#             print(\"Experiment Completed\")    \n",
    "            # Sets the state of the event to signaled,\n",
    "            # allowing one or more waiting threads to proceed.\n",
    "            acquireCompleted.Set()\n",
    "       \n",
    "\n",
    "        \n",
    "        # Check for device and inform user if one is needed\n",
    "        if (device_found()==True): \n",
    "            experiment.ExperimentCompleted += experiment_completed \n",
    "            # Check this location for saved spe after running\n",
    "            #print(\"Please Enter the Exposure Time:\\n\")\n",
    "            #x=int(input())\n",
    "            set_value(CameraSettings.ShutterTimingExposureTime,3000)\n",
    "            #print(\"Please Enter the Number of Frames\")\n",
    "            #y=int(input())\n",
    "            experiment.SetValue(ExperimentSettings.AcquisitionFramesToStore,10)\n",
    "            for k in range(1,3):\n",
    "                if k==1:\n",
    "                    experiment.SetValue(SpectrometerSettings.GratingCenterWavelength,578.1351880026082)\n",
    "                elif k==2:\n",
    "                    experiment.SetValue(SpectrometerSettings.GratingCenterWavelength,621.2340604418703)\n",
    "               \n",
    "                _file_name = \"case\"\n",
    "\n",
    "                # Pass location of saved file\n",
    "                save_file(_file_name)\n",
    "\n",
    "                # Acquire image\n",
    "                experiment.Acquire()\n",
    "                time.sleep(35)\n",
    "                directory=\"C:\\\\Users\\\\labuser\\\\Desktop\\\\data\\\\Raman\\\\Vivek\\\\2019-10-08\"\n",
    "                if( os.path.exists(directory)):        \n",
    "#                         print(\"\\nFound the .spe file...\")        \n",
    "                        print(\" \")\n",
    "                        # Returns all .spe files\n",
    "                        files = glob.glob(directory +'/*.spe')\n",
    "\n",
    "                        # Returns recently acquired .spe file\n",
    "                        last_image_acquired = max(files, key=os.path.getctime)\n",
    "\n",
    "                        try:\n",
    "                            # Open file\n",
    "                            file_name = file_manager.OpenFile(\n",
    "                                last_image_acquired, FileAccess.Read)\n",
    "\n",
    "                            # Access image\n",
    "                            file=file_name\n",
    "                            imageData = file.GetFrame(0,0)\n",
    "                            #here is a problem 11-18-2019\n",
    "                            n=5\n",
    "                            intensity_frame=np.zeros((n,1340))\n",
    "                            # Get image data\n",
    "                            buffer = imageData.GetData()\n",
    "                            #buffer=imageData.GetDataBuffer()\n",
    "                            # Print first 10 pixel intensities\n",
    "                            for i in range(0,n):\n",
    "                                imageData=file.GetFrame(0,i)\n",
    "                                buffer=imageData.GetData()\n",
    "                                for pixel in range(0,1340):\n",
    "                                    intensity_frame[i][pixel]=buffer[pixel]\n",
    "\n",
    "                            file_name.Dispose()\n",
    "\n",
    "\n",
    "                        except IOError:\n",
    "                            print (\"Error: can not find file or read data\")\n",
    "\n",
    "                else:\n",
    "#                     print(\".spe file not found...\")\n",
    "                  print(\" \")\n",
    "\n",
    "#                 print(String.Format(\"{0} {1}\",\n",
    "#                                     \"Image saved to\",\n",
    "#                                     experiment.GetValue(\n",
    "#                                         ExperimentSettings.\n",
    "#                                         FileNameGenerationDirectory)))  \n",
    "\n",
    "\n",
    "                wl= experiment.SystemColumnCalibration\n",
    "                wavelength=np.zeros((1,1340))\n",
    "                for i in range(1340):wavelength[0,i]=wl[i]\n",
    "                #print(intensity_frame)\n",
    "                intensity=np.zeros((1,1340))\n",
    "                for i in range(1340):\n",
    "                    x=0\n",
    "                    for j in range(n):\n",
    "                        x=x+intensity_frame[j][i]\n",
    "                    x=x/n\n",
    "                    intensity[0,i]=x\n",
    "                    check_intensity=x\n",
    "\n",
    "                w=[]\n",
    "                inten=[]\n",
    "\n",
    "                for x in range(1340):\n",
    "                    wavelength[0,x]=1e7*(1/532 - 1/wavelength[0,x])\n",
    "                    w.append(wavelength[0,x])\n",
    "                    inten.append(intensity[0,x])\n",
    "                import csv\n",
    "          \n",
    "                m=\"background\"+str(k)+\"D.csv\"\n",
    "                with open(m, 'w', newline='') as f:\n",
    "                    writer = csv.writer(f)\n",
    "                    writer.writerow([\"W\", \"I\"])\n",
    "                    writer.writerows(zip(w,inten))\n",
    "\n",
    "        \n",
    "    if begin==\"on\":\n",
    "        def set_value(setting, value):    \n",
    "        # Check for existence before setting\n",
    "        # gain, adc rate, or adc quality\n",
    "            if experiment.Exists(setting):\n",
    "                experiment.SetValue(setting, value)\n",
    "\n",
    "        def experiment_completed(sender, event_args):    \n",
    "#             print(\"Experiment Completed\")    \n",
    "            # Sets the state of the event to signaled,\n",
    "            # allowing one or more waiting threads to proceed.\n",
    "            acquireCompleted.Set()\n",
    "       \n",
    "\n",
    "        \n",
    "        # Check for device and inform user if one is needed\n",
    "        if (device_found()==True): \n",
    "            experiment.ExperimentCompleted += experiment_completed \n",
    "            # Check this location for saved spe after running\n",
    "            #print(\"Please Enter the Exposure Time:\\n\")\n",
    "            #x=int(input())\n",
    "            set_value(CameraSettings.ShutterTimingExposureTime,3000)\n",
    "            #print(\"Please Enter the Number of Frames\")\n",
    "            #y=int(input())\n",
    "            experiment.SetValue(ExperimentSettings.AcquisitionFramesToStore,10)\n",
    "            for k in range(1,3):\n",
    "                if k==1:\n",
    "                    experiment.SetValue(SpectrometerSettings.GratingCenterWavelength,578.1351880026082)\n",
    "                elif k==2:\n",
    "                    experiment.SetValue(SpectrometerSettings.GratingCenterWavelength,621.2340604418703)\n",
    "               \n",
    "                _file_name = \"case\"\n",
    "\n",
    "                # Pass location of saved file\n",
    "                save_file(_file_name)\n",
    "\n",
    "                # Acquire image\n",
    "                experiment.Acquire()\n",
    "                time.sleep(35)\n",
    "                directory=\"C:\\\\Users\\\\labuser\\\\Desktop\\\\data\\\\Raman\\\\Vivek\\\\2019-10-08\"\n",
    "                if( os.path.exists(directory)):        \n",
    "#                         print(\"\\nFound the .spe file...\")        \n",
    "                        print(\" \")\n",
    "                        # Returns all .spe files\n",
    "                        files = glob.glob(directory +'/*.spe')\n",
    "\n",
    "                        # Returns recently acquired .spe file\n",
    "                        last_image_acquired = max(files, key=os.path.getctime)\n",
    "\n",
    "                        try:\n",
    "                            # Open file\n",
    "                            file_name = file_manager.OpenFile(\n",
    "                                last_image_acquired, FileAccess.Read)\n",
    "\n",
    "                            # Access image\n",
    "                            file=file_name\n",
    "                            imageData = file.GetFrame(0,0)\n",
    "                            #here is a problem 11-18-2019\n",
    "                            n=5\n",
    "                            intensity_frame=np.zeros((n,1340))\n",
    "                            # Get image data\n",
    "                            buffer = imageData.GetData()\n",
    "                            #buffer=imageData.GetDataBuffer()\n",
    "                            # Print first 10 pixel intensities\n",
    "                            for i in range(0,n):\n",
    "                                imageData=file.GetFrame(0,i)\n",
    "                                buffer=imageData.GetData()\n",
    "                                for pixel in range(0,1340):\n",
    "                                    intensity_frame[i][pixel]=buffer[pixel]\n",
    "\n",
    "                            file_name.Dispose()\n",
    "\n",
    "\n",
    "                        except IOError:\n",
    "                            print (\"Error: can not find file or read data\")\n",
    "\n",
    "                else:\n",
    "#                     print(\".spe file not found...\")\n",
    "                  print(\" \")\n",
    "\n",
    "#                 print(String.Format(\"{0} {1}\",\n",
    "#                                     \"Image saved to\",\n",
    "#                                     experiment.GetValue(\n",
    "#                                         ExperimentSettings.\n",
    "#                                         FileNameGenerationDirectory)))  \n",
    "\n",
    "\n",
    "                wl= experiment.SystemColumnCalibration\n",
    "                wavelength=np.zeros((1,1340))\n",
    "                for i in range(1340):wavelength[0,i]=wl[i]\n",
    "                #print(intensity_frame)\n",
    "                intensity=np.zeros((1,1340))\n",
    "                for i in range(1340):\n",
    "                    x=0\n",
    "                    for j in range(n):\n",
    "                        x=x+intensity_frame[j][i]\n",
    "                    x=x/n\n",
    "                    intensity[0,i]=x\n",
    "                    check_intensity=x\n",
    "\n",
    "                w=[]\n",
    "                inten=[]\n",
    "\n",
    "                for x in range(1340):\n",
    "                    wavelength[0,x]=1e7*(1/532 - 1/wavelength[0,x])\n",
    "                    w.append(wavelength[0,x])\n",
    "                    inten.append(intensity[0,x])\n",
    "                import csv\n",
    "          \n",
    "                m=\"Point \"+str(exp_no)+\" foreground\"+str(k)+\"D.csv\"\n",
    "                with open(m, 'w', newline='') as f:\n",
    "                    writer = csv.writer(f)\n",
    "                    writer.writerow([\"W\", \"I\"])\n",
    "                    writer.writerows(zip(w,inten))\n",
    "\n",
    "                 \n",
    "        if check_intensity>=40e3:\n",
    "            print(\"experiment: \",exp_no, \":Patterning not done\")\n",
    "        \n",
    "        elif check_intensity<40e3:\n",
    "            print(ration(1,2,exp_no))\n",
    "    \n",
    "    if begin==\"first\":\n",
    "        def set_value(setting, value):    \n",
    "        # Check for existence before setting\n",
    "        # gain, adc rate, or adc quality\n",
    "            if experiment.Exists(setting):\n",
    "                experiment.SetValue(setting, value)\n",
    "\n",
    "        def experiment_completed(sender, event_args):    \n",
    "#             print(\"Experiment Completed\")    \n",
    "            # Sets the state of the event to signaled,\n",
    "            # allowing one or more waiting threads to proceed.\n",
    "            acquireCompleted.Set()\n",
    "       \n",
    "\n",
    "        \n",
    "        # Check for device and inform user if one is needed\n",
    "        if (device_found()==True): \n",
    "            experiment.ExperimentCompleted += experiment_completed \n",
    "            # Check this location for saved spe after running\n",
    "            #print(\"Please Enter the Exposure Time:\\n\")\n",
    "            #x=int(input())\n",
    "            set_value(CameraSettings.ShutterTimingExposureTime,3000)\n",
    "            #print(\"Please Enter the Number of Frames\")\n",
    "            #y=int(input())\n",
    "            experiment.SetValue(ExperimentSettings.AcquisitionFramesToStore,5)\n",
    "            for k in range(1,3):\n",
    "                if k==1:\n",
    "                    experiment.SetValue(SpectrometerSettings.GratingCenterWavelength,578.1351880026082)\n",
    "                elif k==2:\n",
    "                    experiment.SetValue(SpectrometerSettings.GratingCenterWavelength,621.2340604418703)\n",
    "                \n",
    "                _file_name = \"case\"\n",
    "\n",
    "                # Pass location of saved file\n",
    "                save_file(_file_name)\n",
    "\n",
    "                # Acquire image\n",
    "                experiment.Acquire()\n",
    "                time.sleep(35)\n",
    "                directory=\"C:\\\\Users\\\\labuser\\\\Desktop\\\\data\\\\Raman\\\\Vivek\\\\2019-10-08\"\n",
    "                if( os.path.exists(directory)):        \n",
    "#                         print(\"\\nFound the .spe file...\")        \n",
    "                        print(\" \")\n",
    "                        # Returns all .spe files\n",
    "                        files = glob.glob(directory +'/*.spe')\n",
    "\n",
    "                        # Returns recently acquired .spe file\n",
    "                        last_image_acquired = max(files, key=os.path.getctime)\n",
    "\n",
    "                        try:\n",
    "                            # Open file\n",
    "                            file_name = file_manager.OpenFile(\n",
    "                                last_image_acquired, FileAccess.Read)\n",
    "\n",
    "                            # Access image\n",
    "                            file=file_name\n",
    "                            imageData = file.GetFrame(0,0)\n",
    "                            #here is a problem 11-18-2019\n",
    "                            n=5\n",
    "                            intensity_frame=np.zeros((n,1340))\n",
    "                            # Get image data\n",
    "                            buffer = imageData.GetData()\n",
    "                            #buffer=imageData.GetDataBuffer()\n",
    "                            # Print first 10 pixel intensities\n",
    "                            for i in range(0,n):\n",
    "                                imageData=file.GetFrame(0,i)\n",
    "                                buffer=imageData.GetData()\n",
    "                                for pixel in range(0,1340):\n",
    "                                    intensity_frame[i][pixel]=buffer[pixel]\n",
    "\n",
    "                            file_name.Dispose()\n",
    "\n",
    "\n",
    "                        except IOError:\n",
    "                            print (\"Error: can not find file or read data\")\n",
    "\n",
    "                else:\n",
    "#                     print(\".spe file not found...\")\n",
    "                  print(\" \")\n",
    "\n",
    "#                 print(String.Format(\"{0} {1}\",\n",
    "#                                     \"Image saved to\",\n",
    "#                                     experiment.GetValue(\n",
    "#                                         ExperimentSettings.\n",
    "#                                         FileNameGenerationDirectory)))  \n",
    "\n",
    "\n",
    "                wl= experiment.SystemColumnCalibration\n",
    "                wavelength=np.zeros((1,1340))\n",
    "                for i in range(1340):wavelength[0,i]=wl[i]\n",
    "                #print(intensity_frame)\n",
    "                intensity=np.zeros((1,1340))\n",
    "                for i in range(1340):\n",
    "                    x=0\n",
    "                    for j in range(n):\n",
    "                        x=x+intensity_frame[j][i]\n",
    "                    x=x/n\n",
    "                    intensity[0,i]=x\n",
    "                    check_intensity=x\n",
    "\n",
    "                w=[]\n",
    "                inten=[]\n",
    "\n",
    "                for x in range(1340):\n",
    "                    wavelength[0,x]=1e7*(1/532 - 1/wavelength[0,x])\n",
    "                    w.append(wavelength[0,x])\n",
    "                    inten.append(intensity[0,x])\n",
    "                import csv\n",
    "          \n",
    "                m=\"Before Point \"+str(exp_no)+\" foreground\"+str(k)+\"D.csv\"\n",
    "                with open(m, 'w', newline='') as f:\n",
    "                    writer = csv.writer(f)\n",
    "                    writer.writerow([\"W\", \"I\"])\n",
    "                    writer.writerows(zip(w,inten))\n",
    "        \n",
    "                 \n",
    "        gd=ration2(1,2,exp_no)\n",
    "   \n",
    "        return gd\n",
    "        \n",
    "            \n",
    "def ration(m1,m2,counter):\n",
    "    get_ipython().run_line_magic('reload_ext', 'autoreload')\n",
    "    get_ipython().run_line_magic('autoreload', '2')\n",
    "    get_ipython().run_line_magic('pylab', 'inline')\n",
    "\n",
    "\n",
    "    from matplotlib.ticker import MultipleLocator\n",
    "    get_ipython().run_line_magic('reload_ext', 'autoreload')\n",
    "    get_ipython().run_line_magic('autoreload', '2')\n",
    "    get_ipython().run_line_magic('pylab', 'inline')\n",
    "    import sys\n",
    "    from lmfit import Parameters, minimize\n",
    "    import pandas as pd # python data manipulation and analysis library\n",
    "    import numpy as np #  Library with large collection of high-level mathematical functions to operate on arrays\n",
    "    import matplotlib.pyplot as plt #python plotting library\n",
    "    import peakutils #baselining library\n",
    "\n",
    "    import os, glob, csv\n",
    " # Library with operating system dependent functionality. Example: Reading data from files on the computer\n",
    "    bg1=pd.read_csv(\"background1D.csv\")\n",
    "    bg2=pd.read_csv(\"background2D.csv\")\n",
    "#     fn1 =pd.read_csv(\"foreground1D.csv\")\n",
    "#     fn2 = pd.read_csv(\"foreground2D.csv\")\n",
    "    fn1=pd.read_csv(\"Point \"+str(counter)+\" foreground1D.csv\")\n",
    "    fn2=pd.read_csv(\"Point \"+str(counter)+\" foreground2D.csv\")\n",
    "\n",
    "    # d1 = pd.read_csv(fn1)\n",
    "    d1 = fn1\n",
    "    # d1_ = pd.read_csv(bg1)\n",
    "    d1_= bg1\n",
    "    d1['I'] = d1['I']-d1_['I']\n",
    "    base1 = peakutils.baseline(d1['I'], 1)\n",
    "    d1['I_base']= d1['I']-base1\n",
    "    d1 = d1[(d1['W']>1250) & (d1['W']<1750)]\n",
    "\n",
    "    # d2 = pd.read_csv(fn2)\n",
    "    d2 = fn2\n",
    "    # d2_ = pd.read_csv(bg2)\n",
    "    d2_= bg2\n",
    "    d2['I'] = d2['I']-d2_['I']\n",
    "    base2 = peakutils.baseline(d2['I'], 1)\n",
    "    d2['I_base'] = d2['I']-base2\n",
    "    d2 = d2[(d2['W']>2600) & (d2['W']<2850)]\n",
    "\n",
    "    def PseudoVoigtFunction(WavNr, Pos, Amp, GammaL, FracL):\n",
    "        SigmaG = GammaL / np.sqrt(2*np.log(2)) # Calculate the sigma parameter  for the Gaussian distribution from GammaL (coupled in Pseudo-Voigt)\n",
    "        LorentzPart = Amp * (GammaL**2 / ((WavNr - Pos)**2 + GammaL**2)) # Lorentzian distribution\n",
    "        GaussPart = Amp * np.exp( -((WavNr - Pos)/SigmaG)**2) # Gaussian distribution\n",
    "        Fit = FracL * LorentzPart + (1 - FracL) * GaussPart # Linear combination of the two parts (or distributions)\n",
    "        return Fit\n",
    "\n",
    "    def one_pv(pars, x, data=None, eps=None): #Function definition\n",
    "        # unpack parameters, extract .value attribute for each parameter\n",
    "        a3 = pars['a3'].value\n",
    "        c3 = pars['c3'].value\n",
    "        s3 = pars['s3'].value\n",
    "        f3 = pars['f3'].value\n",
    "\n",
    "        peak1 = PseudoVoigtFunction(x.astype(float),c3, a3, s3, f3)\n",
    "\n",
    "        model =  peak1  # The global model is the sum of the Gaussian peaks\n",
    "\n",
    "        if data is None: # if we don't have data, the function only returns the direct calculation\n",
    "            return model, peak1\n",
    "        if eps is None: # without errors, no ponderation\n",
    "            return (model - data)\n",
    "        return (model - data)/eps # with errors, the difference is ponderated\n",
    "\n",
    "    def two_pv(pars, x, data=None, eps=None): #Function definition\n",
    "        # unpack parameters, extract .value attribute for each parameter\n",
    "        a1 = pars['a1'].value\n",
    "        c1 = pars['c1'].value\n",
    "        s1 = pars['s1'].value\n",
    "        f1 = pars['f1'].value\n",
    "\n",
    "        a2 = pars['a2'].value\n",
    "        c2 = pars['c2'].value\n",
    "        s2 = pars['s2'].value\n",
    "        f2 = pars['f2'].value\n",
    "\n",
    "        peak1 = PseudoVoigtFunction(x.astype(float), c1, a1, s1, f1)\n",
    "        peak2 = PseudoVoigtFunction(x.astype(float), c2, a2, s2, f2)\n",
    "\n",
    "        model =  peak1 + peak2  # The global model is the sum of the Gaussian peaks\n",
    "\n",
    "        if data is None: # if we don't have data, the function only returns the direct calculation\n",
    "            return model, peak1, peak2\n",
    "        if eps is None: # without errors, no ponderation\n",
    "            return (model - data)\n",
    "        return (model - data)/eps # with errors, the difference is ponderated\n",
    "\n",
    "\n",
    "    ps1 = Parameters()\n",
    "\n",
    "    #            (Name,  Value,  Vary,   Min,  Max,  Expr)\n",
    "    ps1.add_many(('a1',    1 ,   True,     0, None,  None),\n",
    "                 ('c1',   1350,   True,  1330, 1370,  None),\n",
    "                 ('s1',     20,   True,    10,   200,  None),  # 200 so that we get proper fit width of unpatterned peak \n",
    "                 ('f1',    0.5,   True,  0, 1,  None),\n",
    "                 ('a2',      1,   True,     0, None,  None),\n",
    "                 ('c2',    1600,   True, 1560,  1640,  None),\n",
    "                 ('s2',     20,   True,    10,   200,  None),\n",
    "                 ('f2',    0.5,   True,  0, 1,  None))\n",
    "\n",
    "    ps2 = Parameters()\n",
    "\n",
    "    #            (Name,  Value,  Vary,   Min,  Max,  Expr)\n",
    "    ps2.add_many(('a3',      1,   True,     0, None,  None),\n",
    "                 ('c3',    2700,   True, 2650,  2750,  None),\n",
    "                 ('s3',     20,   True,    10,   200,  None),\n",
    "                 ('f3',    0.5,   True,  0, 1,  None))\n",
    "\n",
    "\n",
    "\n",
    "    x = d1['W']\n",
    "    y = d1['I_base']\n",
    "    out = minimize(two_pv, ps1, method = 'leastsq', args=(x, y))\n",
    "\n",
    "    x2 = d2['W']\n",
    "    y2 = d2['I_base']\n",
    "    out2 = minimize(one_pv, ps2, method = 'leastsq', args=(x2, y2))\n",
    "\n",
    "    f, (ax,ax2)=plt.subplots(1,2,sharey=True, gridspec_kw = {'width_ratios':[2.5, 1]})\n",
    "    f.subplots_adjust(wspace=0.1)\n",
    "\n",
    "    ax.xaxis.set_major_locator(MultipleLocator(200))\n",
    "    ax2.xaxis.set_major_locator(MultipleLocator(200))\n",
    "\n",
    "    ax.set_yticklabels([])\n",
    "\n",
    "    ax.plot(x,y,'-',label='measured',)\n",
    "    ax.plot(x,two_pv(out.params, x)[0],label='fit')\n",
    "    ax2.plot(x2,y2,'-')\n",
    "    ax2.plot(x2,one_pv(out2.params, x2)[0])\n",
    "\n",
    "    f.text(0.05, 0.5, 'Intensity [a.u.]', va='center', rotation='vertical', fontsize=16)\n",
    "    f.text(0.5, 0.01, 'Raman shift [cm$^{-1}$]', ha='center', rotation='horizontal',fontsize=16)\n",
    "\n",
    "    # hide the spines between ax and ax2\n",
    "    ax.spines['right'].set_visible(False)\n",
    "    ax2.spines['left'].set_visible(False)\n",
    "    ax.yaxis.tick_left()\n",
    "    # ax.tick_params(labelright='off')  # don't put tick labels at the top\n",
    "    ax2.yaxis.tick_right()\n",
    "    # ax.yaxis.label('test')\n",
    "\n",
    "    d = .02  # how big to make the diagonal lines in axes coordinates\n",
    "    # arguments to pass to plot, just so we don't keep repeating them\n",
    "    kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)\n",
    "    ax.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs)        # top-left diagonal\n",
    "    ax.plot((1 - d, 1 + d), (-d, + d), **kwargs)  # top-right diagonal\n",
    "\n",
    "    kwargs.update(transform=ax2.transAxes)  # switch to the bottom axes\n",
    "    ax2.plot((- d, + d), (- d, + d), **kwargs)  # bottom-left diagonal\n",
    "    ax2.plot((- d, + d), (1 - d, 1 + d), **kwargs)  # bottom-right diagonal\n",
    "\n",
    "    # ax.legend(loc='upper right')\n",
    "    # plt.savefig(p/'Raman_raw_111.png', format='png', dpi=300)\n",
    "    plt.show()\n",
    "\n",
    "    df1 = pd.DataFrame({key: [par.value] for key, par in out.params.items()})\n",
    "    df2 = pd.DataFrame({key: [par.value] for key, par in out2.params.items()})\n",
    "\n",
    "    df = pd.concat([df1,df2],axis=1)\n",
    "\n",
    "    if df['s1'].values > 300:\n",
    "        df[['a1','c1','s1','f1']] = 0\n",
    "\n",
    "    if df['s2'].values > 120:\n",
    "        df[['a2','c2','s2','f2']] = 0\n",
    "\n",
    "    if df['s3'].values > 120:\n",
    "        df[['a3','c3','s3','f3']] = 0\n",
    "\n",
    "    df.columns= ['D','PD','WD','FD','G','PG','WG','FG','2D','P2D','W2D','F2D']\n",
    "    df['GD']=df['G']/df['D']\n",
    "    df['2DG']=df['2D']/df['G']\n",
    "#     ml_file = pd.read_csv(\"dataset-2.csv\")\n",
    "#     ml_file.set_value(counter, \"ratio\", df['GD'].values)\n",
    "#     ml_file.to_csv(\"dataset-2.csv\", index=False)  \n",
    "\n",
    "    if (df['WD'].values>120 and df['D'].values>.5*df['G'].values) or df['WG'].values>120:\n",
    "\n",
    "        print(\"patterning not done\")\n",
    "#         ml_file = pd.read_csv(\"dataset-2.csv\")\n",
    "#         ml_file.set_value(counter, \"ratio\",\" \")\n",
    "#         ml_file.to_csv(\"dataset-2.csv\", index=False)\n",
    "        data=pd.read_csv('dataset-2.csv')\n",
    "        p=data['power']\n",
    "        t=data['time']\n",
    "        pres=data['pressure']\n",
    "        gas=data['gas']\n",
    "#         p[counter+1]=p[counter]\n",
    "#         t[counter+1]=t[counter]\n",
    "#         pres[counter+1]=pres[counter]\n",
    "#         gas[counter+1]=gas[counter]\n",
    "        import csv\n",
    "        if counter==0 or counter==1:\n",
    "            toAdd = [p[counter],t[counter],gas[counter],pres[counter]]\n",
    "            filename=\"dataset-2.csv\"\n",
    "            with open(filename, \"r\") as infile:\n",
    "                reader = list(csv.reader(infile))\n",
    "                reader.insert(counter+1, toAdd)\n",
    "\n",
    "            with open(filename, \"w\", newline='') as outfile:\n",
    "                writer = csv.writer(outfile)\n",
    "                for line in reader:\n",
    "                    writer.writerow(line)\n",
    "    #         ml_file = pd.read_csv(\"dataset-2.csv\")\n",
    "    #         ml_file.set_value(counter, \"ratio\", \" \")\n",
    "    #         ml_file.set_value(counter+1, \"power\",p[counter+1])\n",
    "    #         ml_file.set_value(counter+1, \"time\",t[counter+1])\n",
    "    #         ml_file.set_value(counter+1, \"pressure\",pres[counter+1])\n",
    "    #         ml_file.set_value(counter+1, \"gas\",gas[counter+1])\n",
    "    #         ml_file.to_csv(\"dataset-2.csv\", index=False)\n",
    "\n",
    "\n",
    "\n",
    "            df.to_csv(\"fit.csv\",encoding='utf-8',header=False,index=False)\n",
    "    #         ml_file = pd.read_csv(\"dataset-2.csv\")\n",
    "    #         ml_file.set_value(counter, \"ratio\", \"NO\")\n",
    "    #         ml_file.to_csv(\"dataset-2.csv\", index=False) \n",
    "    #         fit_file=pd.read_csv(\"fit.csv\")\n",
    "    #         fit_file.set_value(counter,df.columns,df.values)\n",
    "    #         fit_file.to_csv(\"fit.csv\",index=False)\n",
    "        else:\n",
    "            if p[counter]==p[counter-1] and p[counter-1]==p[counter-2] and t[counter]==t[counter-1] and t[counter-1]==t[counter-2]:\n",
    "                print(\"No shifting will take place\")\n",
    "                ml_file = pd.read_csv(\"dataset-2.csv\")\n",
    "                ml_file.set_value(counter, \"ratio\", 0)\n",
    "                ml_file.to_csv(\"dataset-2.csv\", index=False) \n",
    "            else:\n",
    "                toAdd = [p[counter],t[counter],gas[counter],pres[counter]]\n",
    "                filename=\"dataset-2.csv\"\n",
    "                with open(filename, \"r\") as infile:\n",
    "                    reader = list(csv.reader(infile))\n",
    "                    reader.insert(counter+1, toAdd)\n",
    "\n",
    "                with open(filename, \"w\", newline='') as outfile:\n",
    "                    writer = csv.writer(outfile)\n",
    "                    for line in reader:\n",
    "                        writer.writerow(line)\n",
    "    #         ml_file = pd.read_csv(\"dataset-2.csv\")\n",
    "    #         ml_file.set_value(counter, \"ratio\", \" \")\n",
    "    #         ml_file.set_value(counter+1, \"power\",p[counter+1])\n",
    "    #         ml_file.set_value(counter+1, \"time\",t[counter+1])\n",
    "    #         ml_file.set_value(counter+1, \"pressure\",pres[counter+1])\n",
    "    #         ml_file.set_value(counter+1, \"gas\",gas[counter+1])\n",
    "    #         ml_file.to_csv(\"dataset-2.csv\", index=False)\n",
    "\n",
    "\n",
    "\n",
    "            df.to_csv(\"fit.csv\",encoding='utf-8',header=False,index=False)\n",
    "    else:\n",
    "        ml_file = pd.read_csv(\"dataset-2.csv\")\n",
    "        ml_file.set_value(counter, \"ratio\", df['GD'].values)\n",
    "        ml_file.to_csv(\"dataset-2.csv\", index=False)  \n",
    "        plot_file= pd.read_csv(\"plot_data.csv\")\n",
    "        plot_file.set_value(counter,\"ratio\", df['GD'].values)\n",
    "        plot_file.to_csv(\"plot_data.csv\", index=False)\n",
    "        df.to_csv(\"fit.csv\",encoding='utf-8',header=False,index=False)\n",
    "\n",
    "        return df['GD'].values, df['2DG'].values\n",
    "\n",
    "#         if __name__ == \"__main__\":\n",
    "#             \"\"\"optional location for parameters\"\"\"\n",
    "#             print(\" \")\n",
    "\n",
    "def ration2(m1,m2,counter):\n",
    "    get_ipython().run_line_magic('reload_ext', 'autoreload')\n",
    "    get_ipython().run_line_magic('autoreload', '2')\n",
    "    get_ipython().run_line_magic('pylab', 'inline')\n",
    "\n",
    "\n",
    "    from matplotlib.ticker import MultipleLocator\n",
    "    get_ipython().run_line_magic('reload_ext', 'autoreload')\n",
    "    get_ipython().run_line_magic('autoreload', '2')\n",
    "    get_ipython().run_line_magic('pylab', 'inline')\n",
    "    import sys\n",
    "    from lmfit import Parameters, minimize\n",
    "    import pandas as pd # python data manipulation and analysis library\n",
    "    import numpy as np #  Library with large collection of high-level mathematical functions to operate on arrays\n",
    "    import matplotlib.pyplot as plt #python plotting library\n",
    "    import peakutils #baselining library\n",
    "\n",
    "    import os, glob, csv\n",
    " # Library with operating system dependent functionality. Example: Reading data from files on the computer\n",
    "    bg1=pd.read_csv(\"background1D.csv\")\n",
    "    bg2=pd.read_csv(\"background2D.csv\")\n",
    "#     fn1 =pd.read_csv(\"foreground1D.csv\")\n",
    "#     fn2 = pd.read_csv(\"foreground2D.csv\")\n",
    "    fn1=pd.read_csv(\"Before Point \"+str(counter)+\" foreground1D.csv\")\n",
    "    fn2=pd.read_csv(\"Before Point \"+str(counter)+\" foreground2D.csv\")\n",
    "\n",
    "    # d1 = pd.read_csv(fn1)\n",
    "    d1 = fn1\n",
    "    # d1_ = pd.read_csv(bg1)\n",
    "    d1_= bg1\n",
    "    d1['I'] = d1['I']-d1_['I']\n",
    "    base1 = peakutils.baseline(d1['I'], 1)\n",
    "    d1['I_base']= d1['I']-base1\n",
    "    d1 = d1[(d1['W']>1250) & (d1['W']<1750)]\n",
    "\n",
    "    # d2 = pd.read_csv(fn2)\n",
    "    d2 = fn2\n",
    "    # d2_ = pd.read_csv(bg2)\n",
    "    d2_= bg2\n",
    "    d2['I'] = d2['I']-d2_['I']\n",
    "    base2 = peakutils.baseline(d2['I'], 1)\n",
    "    d2['I_base'] = d2['I']-base2\n",
    "    d2 = d2[(d2['W']>2600) & (d2['W']<2850)]\n",
    "\n",
    "    def PseudoVoigtFunction(WavNr, Pos, Amp, GammaL, FracL):\n",
    "        SigmaG = GammaL / np.sqrt(2*np.log(2)) # Calculate the sigma parameter  for the Gaussian distribution from GammaL (coupled in Pseudo-Voigt)\n",
    "        LorentzPart = Amp * (GammaL**2 / ((WavNr - Pos)**2 + GammaL**2)) # Lorentzian distribution\n",
    "        GaussPart = Amp * np.exp( -((WavNr - Pos)/SigmaG)**2) # Gaussian distribution\n",
    "        Fit = FracL * LorentzPart + (1 - FracL) * GaussPart # Linear combination of the two parts (or distributions)\n",
    "        return Fit\n",
    "\n",
    "    def one_pv(pars, x, data=None, eps=None): #Function definition\n",
    "        # unpack parameters, extract .value attribute for each parameter\n",
    "        a3 = pars['a3'].value\n",
    "        c3 = pars['c3'].value\n",
    "        s3 = pars['s3'].value\n",
    "        f3 = pars['f3'].value\n",
    "\n",
    "        peak1 = PseudoVoigtFunction(x.astype(float),c3, a3, s3, f3)\n",
    "\n",
    "        model =  peak1  # The global model is the sum of the Gaussian peaks\n",
    "\n",
    "        if data is None: # if we don't have data, the function only returns the direct calculation\n",
    "            return model, peak1\n",
    "        if eps is None: # without errors, no ponderation\n",
    "            return (model - data)\n",
    "        return (model - data)/eps # with errors, the difference is ponderated\n",
    "\n",
    "    def two_pv(pars, x, data=None, eps=None): #Function definition\n",
    "        # unpack parameters, extract .value attribute for each parameter\n",
    "        a1 = pars['a1'].value\n",
    "        c1 = pars['c1'].value\n",
    "        s1 = pars['s1'].value\n",
    "        f1 = pars['f1'].value\n",
    "\n",
    "        a2 = pars['a2'].value\n",
    "        c2 = pars['c2'].value\n",
    "        s2 = pars['s2'].value\n",
    "        f2 = pars['f2'].value\n",
    "\n",
    "        peak1 = PseudoVoigtFunction(x.astype(float), c1, a1, s1, f1)\n",
    "        peak2 = PseudoVoigtFunction(x.astype(float), c2, a2, s2, f2)\n",
    "\n",
    "        model =  peak1 + peak2  # The global model is the sum of the Gaussian peaks\n",
    "\n",
    "        if data is None: # if we don't have data, the function only returns the direct calculation\n",
    "            return model, peak1, peak2\n",
    "        if eps is None: # without errors, no ponderation\n",
    "            return (model - data)\n",
    "        return (model - data)/eps # with errors, the difference is ponderated\n",
    "\n",
    "\n",
    "    ps1 = Parameters()\n",
    "\n",
    "    #            (Name,  Value,  Vary,   Min,  Max,  Expr)\n",
    "    ps1.add_many(('a1',    1 ,   True,     0, None,  None),\n",
    "                 ('c1',   1350,   True,  1330, 1370,  None),\n",
    "                 ('s1',     20,   True,    10,   200,  None),  # 200 so that we get proper fit width of unpatterned peak \n",
    "                 ('f1',    0.5,   True,  0, 1,  None),\n",
    "                 ('a2',      1,   True,     0, None,  None),\n",
    "                 ('c2',    1600,   True, 1560,  1640,  None),\n",
    "                 ('s2',     20,   True,    10,   200,  None),\n",
    "                 ('f2',    0.5,   True,  0, 1,  None))\n",
    "\n",
    "    ps2 = Parameters()\n",
    "\n",
    "    #            (Name,  Value,  Vary,   Min,  Max,  Expr)\n",
    "    ps2.add_many(('a3',      1,   True,     0, None,  None),\n",
    "                 ('c3',    2700,   True, 2650,  2750,  None),\n",
    "                 ('s3',     20,   True,    10,   200,  None),\n",
    "                 ('f3',    0.5,   True,  0, 1,  None))\n",
    "\n",
    "\n",
    "\n",
    "    x = d1['W']\n",
    "    y = d1['I_base']\n",
    "    out = minimize(two_pv, ps1, method = 'leastsq', args=(x, y))\n",
    "\n",
    "    x2 = d2['W']\n",
    "    y2 = d2['I_base']\n",
    "    out2 = minimize(one_pv, ps2, method = 'leastsq', args=(x2, y2))\n",
    "\n",
    "    f, (ax,ax2)=plt.subplots(1,2,sharey=True, gridspec_kw = {'width_ratios':[2.5, 1]})\n",
    "    f.subplots_adjust(wspace=0.1)\n",
    "\n",
    "    ax.xaxis.set_major_locator(MultipleLocator(200))\n",
    "    ax2.xaxis.set_major_locator(MultipleLocator(200))\n",
    "\n",
    "    ax.set_yticklabels([])\n",
    "\n",
    "    ax.plot(x,y,'-',label='measured',)\n",
    "    ax.plot(x,two_pv(out.params, x)[0],label='fit')\n",
    "    ax2.plot(x2,y2,'-')\n",
    "    ax2.plot(x2,one_pv(out2.params, x2)[0])\n",
    "\n",
    "    f.text(0.05, 0.5, 'Intensity [a.u.]', va='center', rotation='vertical', fontsize=16)\n",
    "    f.text(0.5, 0.01, 'Raman shift [cm$^{-1}$]', ha='center', rotation='horizontal',fontsize=16)\n",
    "\n",
    "    # hide the spines between ax and ax2\n",
    "    ax.spines['right'].set_visible(False)\n",
    "    ax2.spines['left'].set_visible(False)\n",
    "    ax.yaxis.tick_left()\n",
    "    # ax.tick_params(labelright='off')  # don't put tick labels at the top\n",
    "    ax2.yaxis.tick_right()\n",
    "    # ax.yaxis.label('test')\n",
    "\n",
    "    d = .02  # how big to make the diagonal lines in axes coordinates\n",
    "    # arguments to pass to plot, just so we don't keep repeating them\n",
    "    kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)\n",
    "    ax.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs)        # top-left diagonal\n",
    "    ax.plot((1 - d, 1 + d), (-d, + d), **kwargs)  # top-right diagonal\n",
    "\n",
    "    kwargs.update(transform=ax2.transAxes)  # switch to the bottom axes\n",
    "    ax2.plot((- d, + d), (- d, + d), **kwargs)  # bottom-left diagonal\n",
    "    ax2.plot((- d, + d), (1 - d, 1 + d), **kwargs)  # bottom-right diagonal\n",
    "\n",
    "    # ax.legend(loc='upper right')\n",
    "    # plt.savefig(p/'Raman_raw_111.png', format='png', dpi=300)\n",
    "    #plt.show()\n",
    "\n",
    "    df1 = pd.DataFrame({key: [par.value] for key, par in out.params.items()})\n",
    "    df2 = pd.DataFrame({key: [par.value] for key, par in out2.params.items()})\n",
    "\n",
    "    df = pd.concat([df1,df2],axis=1)\n",
    "\n",
    "    if df['s1'].values > 300:\n",
    "        df[['a1','c1','s1','f1']] = 0\n",
    "\n",
    "    if df['s2'].values > 120:\n",
    "        df[['a2','c2','s2','f2']] = 0\n",
    "\n",
    "    if df['s3'].values > 120:\n",
    "        df[['a3','c3','s3','f3']] = 0\n",
    "\n",
    "    df.columns= ['D','PD','WD','FD','G','PG','WG','FG','2D','P2D','W2D','F2D']\n",
    "    df['GD']=df['G']/df['D']\n",
    "    df['2DG']=df['2D']/df['G']\n",
    "#     ml_file = pd.read_csv(\"dataset-2.csv\")\n",
    "#     ml_file.set_value(counter, \"ratio\", df['GD'].values)\n",
    "#     ml_file.to_csv(\"dataset-2.csv\", index=False)  \n",
    "\n",
    "   \n",
    "#     ml_file = pd.read_csv(\"pre patterning dataset.csv\")\n",
    "#     ml_file.set_value(counter, \"ratio\", df['GD'].values)\n",
    "#     ml_file.to_csv(\"pre patterning dataset.csv\", index=False)  \n",
    "    z=2\n",
    "    return df['GD']\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
